[{"title":"Hello World","url":"/2025/10/07/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\n\n\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"在Hexo部署Live2d","url":"/2025/10/09/%E5%9C%A8Hexo%E9%83%A8%E7%BD%B2Live2d/","content":"如何在Hexo部署Live2d动画小人\n\n\n前言在此之前一直对Live2d有着比较浓厚的兴趣，在创建了这个Blog之后也是第一时间想到了在上面放上一个Live2d动画。本方法目前仅对.moc的Live2d文件有效，业界现在普遍使用.moc3，关于.moc3相关的Live2d部署移步oh-my-live2d。关于Live2d动画的获取移步这位大佬的github仓库,其中包含了上述两种Live2d模型文件\nhexo-helper-live2d (支持.moc)安装依赖在你的Hexo的根目录下打开终端，输入:  \nnpm install hexo-helper-live2d\n\n配置文件打开站点配置文件 你的根目录\\ _config.yml搜索查找Live2d，如果没有，则复制下列代码在任意处，如果有，则参照进行修改\n# Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d:  enable: true #开关插件版看板娘  scriptFrom: local # 默认  pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径)  pluginJsPath: lib/ # 脚本文件相对与插件根目录路径  pluginModelPath: assets/ # 模型文件相对与插件根目录路径  # scriptFrom: jsdelivr # jsdelivr CDN  # scriptFrom: unpkg # unpkg CDN  # scriptFrom: https://npm.elemecdn.com/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中  debug: false # 调试, 是否在控制台输出日志  model:    use: live2d-widget-model-wanko # npm-module package name    # use: wanko # 博客根目录/live2d_models/ 下的目录名    # use: ./wives/wanko # 相对于博客根目录的路径    # use: https://npm.elemecdn.com/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url  display:    position: right #控制看板娘位置    width: 150 #控制看板娘大小    height: 300 #控制看板娘大小  mobile:    show: true # 手机中是否展示\n\n完成配置后不要忘记:\nhexo cl; hexo g; hexo s\n\n下载Live2d模型(两种方案)两种方案的优缺点：\n\n\n\n\nhexo-helper-live2d\n自己下载或解包\n\n\n\n优点\n下载与部署简单\n模型可以来自任意你游玩的游戏，支持高度自定义\n\n\n缺点\n模型古老，不一定符合你的xp\n需要学习Live2d基本知识，解包产生的版权纠纷…\n\n\n使用hexo-helper-live2d自带的模型npm install live2d-widget-model-xxx\n\nxxx指代下面的模型名称\nlive2d-widget-model-chitoselive2d-widget-model-epsilon2_1live2d-widget-model-gflive2d-widget-model-harulive2d-widget-model-harutolive2d-widget-model-hibikilive2d-widget-model-hijiki  live2d-widget-model-izumilive2d-widget-model-koharulive2d-widget-model-mikulive2d-widget-model-ni-jlive2d-widget-model-nicolive2d-widget-model-nietzschelive2d-widget-model-nipsilonlive2d-widget-model-nitolive2d-widget-model-shizuku live2d-widget-model-tororo live2d-widget-model-tsumikilive2d-widget-model-unitychanlive2d-widget-model-wanko live2d-widget-model-z16\n\n选择好合适的模型后下载，随后在你的根目录\\ _config.yml  文件中修改：\nlive2d:  model:    use: live2d-widget-model-xxx # npm-module package name\n\n完成后保存修改，在 Hexo 根目录运行即可\nhexo cl; hexo g; hexo s\n\n如果有被模型的古老吓到，可以尝试使用自己下载或解包的模型\n使用自己下载或解包的模型首先奉上我学习Live2D技术的两个网站：Live2DViewerEX &emsp; steam上有同名软件，也是我学习Live2d技术的起始点Live2DHub &emsp; 交流社区，主要关注解包技术以及模型配置\n在成功下载或解包Live2D文件之后，你的模型文件夹下应当有以.moc结尾的文件，以及.model.json结尾的文件。注意!  部分模型该文件命名为model.json，需要手动命名为xxx.model.json模型文件的大致结构如下\n在项目根目录下新建文件夹live2d_models,在里面新建子文件夹xxx(你模型的名字，以便日后批量管理和调用),最后将模型文件放进对应文件夹。\n在你的根目录\\ _config.yml  文件中修改：\nlive2d:  model:    use: xxx # 刚刚的子文件夹名\n\n最终\nhexo cl; hexo g; hexo s\n\n模型会默认出现在左下角：如果需要调整，在_config.yml与styles.styl中修改，不再赘述。\n补充如果模型所处位置遮住了按钮，将pointer-events置为none\n","categories":["Hexo"],"tags":["Hexo","Live2D"]},{"title":"test","url":"/2025/10/08/test/","content":"其实是第一篇博客\n\n\nhello world$ hello world"},{"title":"Hexo8.2.0以上版本部署Valine","url":"/2025/10/10/Hexo8.2.0%E4%BB%A5%E4%B8%8A%E7%89%88%E6%9C%AC%E9%83%A8%E7%BD%B2Valine/","content":"由于Next在8.2.0以上版本不再内置Valine，因此需要更加繁琐的手动配置，如需使用尽可能使用更低版本的Next\n\n\n前言由于最开始搭建Blog的时候没有想太多，全都是按照流程来，导致下载了更高版本的Next还对照着低版本的教程去部署Valine，浪费了大量的时间。所以如果需要部署Valine，提前就要知道使用更低版本的Next(这对初学者也不大可能吧)。\n安装Next-Valine补丁（针对8.2.0以上版本的Next）Github讨论贴: Why remove the valine comment in the latest version？Hexo NexT Valine补丁: hexo-next-valine\n如果不想追根溯源看看Next官方砍掉内置Valine的脑残(并非)举措，省流：在项目根目录终端运行如下代码:\nnpm install next-theme/hexo-next-valine\n\n正常的配置流程1 注册 LeanCloud\n2 创建 Valine 应用，名称任意，例如 Valine-Admin\n3 进入对应的应用，点击 设置 -&gt; 应用 Keys，获取 AppID 和 AppKey\n4 在 Hexo 博客主题配置文件 next&#x2F;_config.yml 中进行配置 AppID 和 AppKey，这里整段复制在合适的地方即可，8.2以上的Next本身就没有”valine:”。\n# Valine# For more information: https://valine.js.org, https://github.com/xCss/Valinevaline:  enable: true  appId: xxxxxxxxxxxxxxxxxxxx # leancloud application app id  appKey: xxxxxxxxxxxxxxxxxxxx # leancloud application app key  serverURLs: &quot;https://bspa2cxi.lc-cn-n1-shared.com&quot; # When the custom domain name is enabled, fill it in here  placeholder: Just go go # comment box placeholder  avatar: mm # gravatar style  meta: [nick, mail, link] # Custom comment header  pageSize: 10 # pagination size  visitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&#x27; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html  comment_count: true # If false, comment count will only be displayed in post page, not in home page  recordIP: false # Whether to record the commenter IP  enableQQ: false # Whether to enable the Nickname box to automatically get QQ Nickname and QQ Avatar  requiredFields: [] # Set required fields: [nick] | [nick, mail]  libUrl: https://cdnjs.cloudflare.com/ajax/libs/valine/1.5.3/Valine.min.js # Valine.min.js file URL in CDN (or local path)\n\n5 在LeanCloud给自己的域名设置白名单\n最终\nhexo cl; hexo g; hexo s\n\n进入页面后进行测试\n补充配置Valine后例如“标签”，“分类”等子页面也会出现评论界面，这显然是不合理的。在 根目录&#x2F;source&#x2F;categories (或tags等等，取决于你有多少个)，下的index.md中修改如下:\n---title: categoriesdate: 2025-10-10 08:39:59type: &quot;categories&quot;comments: false---\n\n这样这些无关页面就没有评论栏了\n","categories":["Hexo"],"tags":["Hexo"]}]